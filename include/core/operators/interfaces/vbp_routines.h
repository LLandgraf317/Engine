// This file was automatically generated by vbp_routine_gen.py

namespace morphstore {

// ----------------------------------------------------------------------
// Compression
// ----------------------------------------------------------------------

template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<1, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 1;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<2, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 2;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<3, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 3;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<4, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 4;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<5, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 5;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<6, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 6;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<7, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 7;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<8, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 8;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<9, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 9;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<10, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 10;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<11, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 11;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<12, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 12;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<13, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 13;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<14, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 14;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<15, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 15;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<16, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 16;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 4;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<17, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 17;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<18, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 18;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<19, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 19;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<20, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 20;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<21, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 21;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<22, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 22;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<23, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 23;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<24, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 24;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<25, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 25;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<26, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 26;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<27, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 27;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<28, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 28;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<29, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 29;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<30, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 30;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<31, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 31;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<32, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 32;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 2;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<33, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 33;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<34, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 34;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<35, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 35;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<36, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 36;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<37, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 37;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<38, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 38;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<39, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 39;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<40, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 40;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<41, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 41;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<42, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 42;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<43, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 43;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<44, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 44;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<45, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 45;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 43);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<46, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 46;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<47, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 47;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 45);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 43);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<48, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 48;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 4;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<49, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 49;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 45);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 47);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 43);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<50, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 50;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<51, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 51;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 43);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 45);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 47);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 49);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 50);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<52, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 52;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<53, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 53;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 50);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 52);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 43);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 45);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 47);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 49);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 51);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<54, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 54;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 50);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 52);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<55, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 55;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 45);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 54);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 53);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 43);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 52);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 51);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 50);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 49);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 47);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<56, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 56;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<57, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 57;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 49);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 56);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 55);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 47);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 54);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 53);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 45);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 52);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 51);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 43);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 50);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<58, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 58;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 54);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 50);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 56);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 52);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<59, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 59;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 45);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 50);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 55);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 51);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 56);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 47);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 52);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 57);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 43);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 53);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 58);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 49);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 54);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<60, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 60;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 52);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 56);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<61, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 61;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 45);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 51);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 54);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 57);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 60);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 47);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 50);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 53);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 56);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 59);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 43);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 49);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 52);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 55);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 58);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<62, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 62;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 50);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 52);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 54);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 56);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 58);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 60);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<63, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 63;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 1);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 2);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 3);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 4);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 5);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 6);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 7);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 8);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 9);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 10);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 11);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 12);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 13);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 14);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 15);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 16);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 17);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 18);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 19);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 20);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 21);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 22);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 23);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 24);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 25);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 26);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 27);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 28);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 29);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 30);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 31);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 32);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 33);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 34);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 35);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 36);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 37);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 38);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 39);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 40);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 41);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 42);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 43);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 44);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 45);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 46);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 47);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 48);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 49);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 50);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 51);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 52);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 53);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 54);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 55);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 56);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 57);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 58);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 59);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 60);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 61);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = shift_right<t_ve>::apply(tmp2, 62);
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<64, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 64;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 1;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


// ----------------------------------------------------------------------
// Decompression
// ----------------------------------------------------------------------

template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<1, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 1;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<2, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 2;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<3, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 3;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<4, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 4;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<5, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 5;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<6, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 6;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<7, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 7;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<8, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 8;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<9, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 9;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<10, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 10;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<11, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 11;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<12, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 12;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<13, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 13;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<14, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 14;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<15, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 15;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<16, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 16;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 4;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<17, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 17;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<18, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 18;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<19, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 19;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<20, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 20;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<21, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 21;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<22, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 22;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<23, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 23;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<24, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 24;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<25, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 25;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<26, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 26;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<27, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 27;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<28, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 28;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<29, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 29;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<30, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 30;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<31, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 31;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<32, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 32;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 2;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<33, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 33;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<34, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 34;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<35, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 35;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<36, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 36;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<37, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 37;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<38, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 38;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<39, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 39;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<40, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 40;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<41, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 41;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<42, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 42;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<43, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 43;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<44, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 44;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<45, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 45;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<46, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 46;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<47, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 47;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<48, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 48;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 4;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<49, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 49;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<50, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 50;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<51, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 51;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<52, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 52;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<53, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 53;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<54, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 54;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<55, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 55;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 53), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<56, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 56;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<57, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 57;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 55), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 53), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<58, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 58;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<59, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 59;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 55), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 57), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 53), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 58), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<60, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 60;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<61, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 61;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 57), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 60), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 53), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 59), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 55), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 58), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<62, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 62;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 58), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 60), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<63, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 63;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 53), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 55), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 57), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 58), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 59), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 60), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 61), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 62), nextOut));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        uncompr_f,
        vbp_l<64, t_vector_extension::vector_helper_t::element_count::value>
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 64;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countLog
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 1;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, nextOut);
            outBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


// ----------------------------------------------------------------------
// Decompression and processing
// ----------------------------------------------------------------------

template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<1, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 1;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<2, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 2;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<3, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 3;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<4, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 4;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<5, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 5;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<6, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 6;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<7, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 7;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<8, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 8;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<9, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 9;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<10, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 10;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<11, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 11;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<12, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 12;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<13, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 13;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<14, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 14;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<15, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 15;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<16, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 16;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 4;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<17, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 17;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<18, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 18;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<19, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 19;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<20, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 20;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<21, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 21;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<22, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 22;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<23, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 23;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<24, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 24;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<25, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 25;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<26, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 26;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<27, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 27;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<28, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 28;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<29, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 29;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<30, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 30;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<31, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 31;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<32, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 32;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 2;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<33, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 33;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<34, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 34;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<35, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 35;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<36, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 36;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<37, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 37;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<38, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 38;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<39, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 39;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<40, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 40;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<41, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 41;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<42, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 42;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<43, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 43;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<44, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 44;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<45, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 45;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<46, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 46;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<47, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 47;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<48, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 48;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 4;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<49, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 49;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<50, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 50;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<51, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 51;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<52, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 52;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<53, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 53;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<54, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 54;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<55, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 55;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 53), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<56, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 56;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 8;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<57, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 57;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 55), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 53), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<58, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 58;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<59, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 59;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 55), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 57), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 53), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 58), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<60, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 60;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 16;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<61, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 61;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 57), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 60), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 53), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 59), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 55), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 58), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<62, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 62;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 32;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 58), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 60), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<63, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 63;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 64;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 63));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 1), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 62));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 2), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 61));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 3), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 60));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 4), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 59));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 5), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 58));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 6), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 57));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 7), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 56));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 8), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 55));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 9), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 54));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 10), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 53));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 11), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 52));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 12), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 51));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 13), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 50));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 14), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 49));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 15), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 48));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 16), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 47));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 17), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 46));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 18), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 45));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 19), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 44));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 20), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 43));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 21), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 42));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 22), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 41));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 23), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 40));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 24), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 39));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 25), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 38));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 26), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 37));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 27), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 36));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 28), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 35));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 29), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 34));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 30), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 33));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 31), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 32));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 32), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 31));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 33), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 30));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 34), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 29));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 35), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 28));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 36), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 27));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 37), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 26));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 38), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 25));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 39), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 24));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 40), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 23));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 41), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 22));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 42), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 21));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 43), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 20));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 44), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 19));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 45), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 18));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 46), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 17));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 47), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 16));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 48), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 15));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 49), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 14));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 50), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 13));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 51), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 12));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 52), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 11));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 53), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 10));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 54), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 9));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 55), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 8));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 56), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 7));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 57), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 6));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 58), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 5));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 59), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 4));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 60), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 3));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 61), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 2));
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, bitwise_or<t_ve>(shift_left<t_ve>::apply(tmp, 62), nextOut));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 1));
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


template<class t_vector_extension, template<class, class ...> class t_op_vector, class ... t_extra_args>
class decompress_and_process_batch<
        t_vector_extension,
        vbp_l<64, t_vector_extension::vector_helper_t::element_count::value>,
        t_op_vector,
        t_extra_args ...
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 64;

    using src_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_UNPACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, size_t countInLog, typename t_op_vector<t_ve, t_extra_args ...>::state_t & opState
    ) {
        using namespace vectorlib;

        const vector_t mask = set1<t_ve, vector_base_t_granularity::value>(bitwidth_max<base_t>(m_Bw));
        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t nextOut = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);

        const size_t cycleLenVec = 1;
        const size_t cycleLenBase =
                cycleLenVec * vector_element_count::value;
        for(size_t i = 0; i < countInLog; i += cycleLenBase) {
            tmp = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            nextOut = bitwise_and<t_ve>(mask, tmp);
            t_op_vector<t_ve, t_extra_args ...>::apply(nextOut, opState);
            nextOut = bitwise_and<t_ve>(mask, shift_right<t_ve>::apply(tmp, 64));
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
    }
};


}
